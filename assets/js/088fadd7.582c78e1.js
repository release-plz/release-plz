"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2281],{8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>o});var r=s(6540);const t={},i=r.createContext(t);function a(e){const n=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),r.createElement(i.Provider,{value:n},e.children)}},9634:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"extra/releasing-binaries","title":"Releasing binaries","description":"Why release-plz doesn\'t release binaries","source":"@site/docs/extra/releasing-binaries.md","sourceDirName":"extra","slug":"/extra/releasing-binaries","permalink":"/docs/extra/releasing-binaries","draft":false,"unlisted":false,"editUrl":"https://github.com/release-plz/release-plz/tree/main/website/docs/extra/releasing-binaries.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Extra","permalink":"/docs/extra/"},"next":{"title":"Single changelog","permalink":"/docs/extra/single-changelog"}}');var t=s(4848),i=s(8453);const a={},o="Releasing binaries",l={},c=[{value:"Why release-plz doesn&#39;t release binaries",id:"why-release-plz-doesnt-release-binaries",level:2},{value:"Releasing binaries after release",id:"releasing-binaries-after-release",level:2}];function u(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"releasing-binaries",children:"Releasing binaries"})}),"\n",(0,t.jsx)(n.h2,{id:"why-release-plz-doesnt-release-binaries",children:"Why release-plz doesn't release binaries"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Since release-plz already publishes GitHub releases, would it\nmake sense for it to build the binaries of the project and publish\nthem to the release assets? \ud83e\udd14"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Not really. Releasing binaries requires setting a CI job different\nfrom the one used to run ",(0,t.jsx)(n.code,{children:"release-plz release"})," because:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"release-plz release"})," should run once (for example on an ",(0,t.jsx)(n.code,{children:"ubuntu"})," CI image);"]}),"\n",(0,t.jsxs)(n.li,{children:["building binaries requires a different CI image for each platform\n(e.g. ",(0,t.jsx)(n.code,{children:"ubuntu"}),", ",(0,t.jsx)(n.code,{children:"macos"}),", ",(0,t.jsx)(n.code,{children:"windows"}),")."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Since users have to set up an additional CI job to build binaries, using release-plz\nwould not be more convenient than using a different tool.\nPlus, releasing binaries is a complex task, which is already well-handled by\nother tools in the Rust ecosystem.\nFor these reasons, release-plz doesn't build and release binaries."}),"\n",(0,t.jsx)(n.p,{children:"The next section explains how to use other tools to build and release binaries after\nrelease-plz released the new version of your project."}),"\n",(0,t.jsx)(n.h2,{id:"releasing-binaries-after-release",children:"Releasing binaries after release"}),"\n",(0,t.jsx)(n.p,{children:'If you are using release-plz to release your project, you can\nrun a CI job on the "tag" or "release" events to build and release the binaries.'}),"\n",(0,t.jsxs)(n.p,{children:["Here is an example based on release-plz's own\n",(0,t.jsxs)(n.a,{href:"https://github.com/release-plz/release-plz/blob/main/.github/workflows/cd.yml",children:[(0,t.jsx)(n.code,{children:"cd.yml"})," workflow"]}),":"]}),"\n",(0,t.jsxs)(n.admonition,{type:"info",children:[(0,t.jsx)(n.p,{children:"To use this in your project, change:"}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["the repository owner from ",(0,t.jsx)(n.code,{children:'"MyOwner"'})," to your username/organisation."]}),"\n",(0,t.jsxs)(n.li,{children:["the release name from ",(0,t.jsx)(n.code,{children:'"my-bin-v"'})," to the release name of your binary according to\n",(0,t.jsx)(n.a,{href:"/docs/config#the-git_release_name-field",children:(0,t.jsx)(n.code,{children:"git_release_name"})}),"."]}),"\n"]})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"name: CD # Continuous Deployment\n\npermissions:\n  contents: write\n\non:\n  release:\n    types: [published]\n\nenv:\n  CARGO_INCREMENTAL: 0\n  CARGO_NET_GIT_FETCH_WITH_CLI: true\n  CARGO_NET_RETRY: 10\n  CARGO_TERM_COLOR: always\n  RUST_BACKTRACE: 1\n  RUSTFLAGS: -D warnings\n  RUSTUP_MAX_RETRIES: 10\n\ndefaults:\n  run:\n    shell: bash\n\njobs:\n  upload-assets:\n    name: ${{ matrix.target }}\n    if: github.repository_owner == 'MyOwner' && startsWith(github.event.release.name, 'my-bin-v')\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        include:\n          - target: aarch64-unknown-linux-gnu\n            os: ubuntu-22.04\n          - target: aarch64-unknown-linux-musl\n            os: ubuntu-22.04\n          - target: aarch64-apple-darwin\n            os: macos-13\n          - target: aarch64-pc-windows-msvc\n            os: windows-2022\n          - target: x86_64-unknown-linux-gnu\n            os: ubuntu-22.04\n          - target: x86_64-unknown-linux-musl\n            os: ubuntu-22.04\n          - target: x86_64-apple-darwin\n            os: macos-13\n          - target: x86_64-pc-windows-msvc\n            os: windows-2022\n          - target: x86_64-unknown-freebsd\n            os: ubuntu-22.04\n    timeout-minutes: 60\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n      - name: Install Rust toolchain\n        uses: dtolnay/rust-toolchain@stable\n      - uses: taiki-e/setup-cross-toolchain-action@v1\n        with:\n          target: ${{ matrix.target }}\n        if: startsWith(matrix.os, 'ubuntu') && !contains(matrix.target, '-musl')\n      - uses: taiki-e/install-action@v2\n        with:\n          tool: cross\n        if: contains(matrix.target, '-musl')\n      - run: echo \"RUSTFLAGS=${RUSTFLAGS} -C target-feature=+crt-static\" >> \"${GITHUB_ENV}\"\n        if: endsWith(matrix.target, 'windows-msvc')\n      - uses: taiki-e/upload-rust-binary-action@v1\n        with:\n          bin: my-bin\n          target: ${{ matrix.target }}\n          tar: all\n          zip: windows\n          token: ${{ secrets.GITHUB_TOKEN }}\n"})}),"\n",(0,t.jsx)(n.p,{children:"Some projects to consider for this task:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://github.com/taiki-e/upload-rust-binary-action",children:"upload-rust-binary-action"}),":\nGitHub Action for building and uploading Rust binary to GitHub Releases."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://crates.io/crates/cargo-dist",children:"cargo-dist"}),":\nshippable application packaging for Rust."]}),"\n"]}),"\n",(0,t.jsx)(n.admonition,{type:"caution",children:(0,t.jsxs)(n.p,{children:["To release a binary after release, the release-plz GitHub Action needs to\n",(0,t.jsx)(n.a,{href:"/docs/github/token",children:"trigger further workflow runs"}),"."]})})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}}}]);