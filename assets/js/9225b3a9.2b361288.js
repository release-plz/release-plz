"use strict";(globalThis.webpackChunkdocs=globalThis.webpackChunkdocs||[]).push([[5950],{4470:(e,s,i)=>{i.r(s),i.d(s,{assets:()=>d,contentTitle:()=>a,default:()=>o,frontMatter:()=>c,metadata:()=>n,toc:()=>t});const n=JSON.parse('{"id":"config","title":"Configuration","description":"This section describes how you can customize the behavior of release-plz","source":"@site/docs/config.md","sourceDirName":".","slug":"/config","permalink":"/docs/config","draft":false,"unlisted":false,"editUrl":"https://github.com/release-plz/release-plz/tree/main/website/docs/config.md","tags":[],"version":"current","frontMatter":{"toc_max_heading_level":4},"sidebar":"tutorialSidebar","previous":{"title":"Persist credentials","permalink":"/docs/github/persist-credentials"},"next":{"title":"Changelog","permalink":"/docs/changelog/"}}');var l=i(4848),r=i(8453);const c={toc_max_heading_level:4},a="Configuration",d={},t=[{value:"Example",id:"example",level:2},{value:"Reference",id:"reference",level:2},{value:"The <code>[workspace]</code> section",id:"the-workspace-section",level:3},{value:"The <code>allow_dirty</code> field",id:"the-allow_dirty-field",level:4},{value:"The <code>changelog_config</code> field",id:"the-changelog_config-field",level:4},{value:"The <code>changelog_update</code> field",id:"the-changelog_update-field",level:4},{value:"The <code>dependencies_update</code> field",id:"the-dependencies_update-field",level:4},{value:"The <code>features_always_increment_minor</code> field",id:"the-features_always_increment_minor-field",level:4},{value:"The <code>git_release_enable</code> field",id:"the-git_release_enable-field",level:4},{value:"The <code>git_release_name</code> field",id:"the-git_release_name-field",level:4},{value:"The <code>git_release_body</code> field",id:"the-git_release_body-field",level:4},{value:"The <code>git_release_type</code> field",id:"the-git_release_type-field",level:4},{value:"The <code>git_release_draft</code> field",id:"the-git_release_draft-field",level:4},{value:"The <code>git_release_latest</code> field",id:"the-git_release_latest-field",level:4},{value:"The <code>git_tag_enable</code> field",id:"the-git_tag_enable-field",level:4},{value:"The <code>git_tag_name</code> field",id:"the-git_tag_name-field",level:4},{value:"The <code>pr_name</code> field",id:"the-pr_name-field",level:4},{value:"The <code>pr_body</code> field",id:"the-pr_body-field",level:4},{value:"The <code>pr_branch_prefix</code> field",id:"the-pr_branch_prefix-field",level:4},{value:"The <code>pr_draft</code> field",id:"the-pr_draft-field",level:4},{value:"The <code>pr_labels</code> field",id:"the-pr_labels-field",level:4},{value:"The <code>publish</code> field",id:"the-publish-field",level:4},{value:"The <code>publish_allow_dirty</code> field",id:"the-publish_allow_dirty-field",level:4},{value:"The <code>publish_no_verify</code> field",id:"the-publish_no_verify-field",level:4},{value:"The <code>publish_features</code> field",id:"the-publish_features-field",level:4},{value:"The <code>publish_all_features</code> field",id:"the-publish_all_features-field",level:4},{value:"The <code>publish_timeout</code> field",id:"the-publish_timeout-field",level:4},{value:"The <code>release</code> field",id:"the-release-field",level:4},{value:"The <code>release_always</code> field",id:"the-release_always-field",level:4},{value:"The <code>release_commits</code> field",id:"the-release_commits-field",level:4},{value:"The <code>repo_url</code> field",id:"the-repo_url-field",level:4},{value:"The <code>semver_check</code> field",id:"the-semver_check-field",level:4},{value:"The <code>[[package]]</code> section",id:"the-package-section",level:3},{value:"The <code>name</code> field",id:"the-name-field",level:4},{value:"The <code>changelog_include</code> field",id:"the-changelog_include-field",level:4},{value:"The <code>changelog_path</code> field (<code>package</code> section)",id:"the-changelog_path-field-package-section",level:4},{value:"The <code>changelog_update</code> field (<code>package</code> section)",id:"the-changelog_update-field-package-section",level:4},{value:"The <code>features_always_increment_minor</code> field (<code>package</code> section)",id:"the-features_always_increment_minor-field-package-section",level:4},{value:"The <code>git_release_enable</code> field (<code>package</code> section)",id:"the-git_release_enable-field-package-section",level:4},{value:"The <code>git_release_name</code> field (<code>package</code> section)",id:"the-git_release_name-field-package-section",level:4},{value:"The <code>git_release_body</code> field (<code>package</code> section)",id:"the-git_release_body-field-package-section",level:4},{value:"The <code>git_release_type</code> field (<code>package</code> section)",id:"the-git_release_type-field-package-section",level:4},{value:"The <code>git_release_draft</code> field (<code>package</code> section)",id:"the-git_release_draft-field-package-section",level:4},{value:"The <code>git_release_latest</code> field (<code>package</code> section)",id:"the-git_release_latest-field-package-section",level:4},{value:"The <code>git_tag_enable</code> field (<code>package</code> section)",id:"the-git_tag_enable-field-package-section",level:4},{value:"The <code>git_tag_name</code> field (<code>package</code> section)",id:"the-git_tag_name-field-package-section",level:4},{value:"The <code>publish</code> field (<code>package</code> section)",id:"the-publish-field-package-section",level:4},{value:"The <code>publish_allow_dirty</code> field (<code>package</code> section)",id:"the-publish_allow_dirty-field-package-section",level:4},{value:"The <code>publish_no_verify</code> field (<code>package</code> section)",id:"the-publish_no_verify-field-package-section",level:4},{value:"The <code>publish_features</code> field (<code>package</code> section)",id:"the-publish_features-field-package-section",level:4},{value:"The <code>publish_all_features</code> field (<code>package</code> section)",id:"the-publish_all_features-field-package-section",level:4},{value:"The <code>release</code> field (<code>package</code> section)",id:"the-release-field-package-section",level:4},{value:"The <code>semver_check</code> field (<code>package</code> section)",id:"the-semver_check-field-package-section",level:4},{value:"The <code>version_group</code> field",id:"the-version_group-field",level:4},{value:"The <code>[changelog]</code> section",id:"the-changelog-section",level:3},{value:"The <code>header</code> field",id:"the-header-field",level:4},{value:"The <code>body</code> field",id:"the-body-field",level:4},{value:"The <code>trim</code> field",id:"the-trim-field",level:4},{value:"The <code>protect_breaking_commits</code> field",id:"the-protect_breaking_commits-field",level:4},{value:"The <code>tag_pattern</code> field",id:"the-tag_pattern-field",level:4},{value:"The <code>sort_commits</code> field",id:"the-sort_commits-field",level:4},{value:"The <code>commit_preprocessors</code> field",id:"the-commit_preprocessors-field",level:4},{value:"Using external commands",id:"using-external-commands",level:5},{value:"The <code>postprocessors</code> field",id:"the-postprocessors-field",level:4},{value:"The <code>commit_parsers</code> field",id:"the-commit_parsers-field",level:4},{value:"The <code>link_parsers</code> field",id:"the-link_parsers-field",level:4}];function h(e){const s={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(s.header,{children:(0,l.jsx)(s.h1,{id:"configuration",children:"Configuration"})}),"\n",(0,l.jsxs)(s.p,{children:["This section describes how you can customize the behavior of release-plz\nwith the ",(0,l.jsx)(s.code,{children:"release-plz.toml"})," file."]}),"\n",(0,l.jsx)(s.p,{children:"This configuration file is optional \u2014 release-plz is designed to work out of the box,\nwith decent defaults."}),"\n",(0,l.jsx)(s.admonition,{type:"tip",children:(0,l.jsxs)(s.p,{children:["If you are just trying out release-plz, you can skip this section and come back to it later.\nIf you are using release-plz to release important projects, make sure to check the\n",(0,l.jsx)(s.a,{href:"#the-release_always-field",children:(0,l.jsx)(s.code,{children:"release_always"})})," field."]})}),"\n",(0,l.jsxs)(s.p,{children:["Put your ",(0,l.jsx)(s.code,{children:"release-plz.toml"})," (or ",(0,l.jsx)(s.code,{children:".release-plz.toml"}),") file in the same directory of your root ",(0,l.jsx)(s.code,{children:"Cargo.toml"}),"."]}),"\n",(0,l.jsx)(s.h2,{id:"example",children:"Example"}),"\n",(0,l.jsxs)(s.p,{children:["Here's an example configuration file for a cargo workspace.\n",(0,l.jsx)(s.code,{children:"package_a"}),", ",(0,l.jsx)(s.code,{children:"package_b"})," and ",(0,l.jsx)(s.code,{children:"package_c"})," override some fields from the default configuration ",(0,l.jsx)(s.code,{children:"[workspace]"}),",\nwhile the other packages inherit the default configuration."]}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-toml",children:'[workspace]\nallow_dirty = true # allow updating repositories with uncommitted changes\nchangelog_update = false # disable changelog updates\ndependencies_update = true # update dependencies with `cargo update`\ngit_release_enable = false # disable GitHub/Gitea releases\npr_branch_prefix = "release-plz-" # PR branch prefix\npr_labels = ["release"] # add the `release` label to the release Pull Request\npublish_allow_dirty = true # add `--allow-dirty` to `cargo publish`\nsemver_check = false # disable API breaking changes checks\npublish_timeout = "10m" # set a timeout for `cargo publish`\nrelease_commits = "^feat:" # prepare release only if at least one commit matches a regex\n\n[[package]] # the double square brackets define a TOML table array\nname = "package_a"\nchangelog_include = ["package_b"] # include commits from `package_b` in the changelog\nchangelog_path = "docs/CHANGELOG.md" # use a custom changelog path for `package_a`\nchangelog_update = true # enable changelog update for `package_a`\ngit_release_enable = true # enable GitHub/Gitea releases for `package_a`\npublish = false # disable `cargo publish` for `package_a`\n\n[[package]]\nname = "package_b"\nsemver_check = true # enable semver_check for `package_b`\npublish_no_verify = true # add `--no-verify` to `cargo publish` for `package_b`\npublish_features = ["a", "b"] # add `--features=a,b` to `cargo publish` for `package_b`\npublish_all_features = true # add `--all-features` to `cargo publish` for `package_b`\n\n[[package]]\nname = "package_c"\nrelease = false # don\'t process this package\n\n[changelog]\nprotect_breaking_commits = true # always include commits with breaking changes in the changelog\n'})}),"\n",(0,l.jsx)(s.h2,{id:"reference",children:"Reference"}),"\n",(0,l.jsxs)(s.p,{children:["The configuration file is written in the ",(0,l.jsx)(s.a,{href:"https://toml.io/",children:"TOML"})," format and consists of\nthe following sections:"]}),"\n",(0,l.jsxs)(s.ul,{children:["\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.a,{href:"#the-workspace-section",children:(0,l.jsx)(s.code,{children:"[workspace]"})})," \u2014 Configuration applied to all packages by default.","\n",(0,l.jsxs)(s.ul,{children:["\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.a,{href:"#the-allow_dirty-field",children:(0,l.jsx)(s.code,{children:"allow_dirty"})})," \u2014 Update dirty working directories."]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.a,{href:"#the-changelog_config-field",children:(0,l.jsx)(s.code,{children:"changelog_config"})})," \u2014 Path to the ",(0,l.jsx)(s.a,{href:"https://git-cliff.org",children:"git-cliff"})," configuration file."]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.a,{href:"#the-changelog_update-field",children:(0,l.jsx)(s.code,{children:"changelog_update"})})," \u2014 Update changelog."]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.a,{href:"#the-dependencies_update-field",children:(0,l.jsx)(s.code,{children:"dependencies_update"})})," \u2014 Update all dependencies."]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.a,{href:"#the-features_always_increment_minor-field",children:(0,l.jsx)(s.code,{children:"features_always_increment_minor"})}),"\n\u2014 Features increment minor in ",(0,l.jsx)(s.code,{children:"0.x"})," versions."]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.a,{href:"#the-git_release_enable-field",children:(0,l.jsx)(s.code,{children:"git_release_enable"})})," \u2014 Enable git release."]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.a,{href:"#the-git_release_name-field",children:(0,l.jsx)(s.code,{children:"git_release_name"})})," \u2014 Customize git release name pattern."]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.a,{href:"#the-git_release_body-field",children:(0,l.jsx)(s.code,{children:"git_release_body"})})," \u2014 Customize git release body pattern."]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.a,{href:"#the-git_release_type-field",children:(0,l.jsx)(s.code,{children:"git_release_type"})})," \u2014 Publish mode for git release."]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.a,{href:"#the-git_release_draft-field",children:(0,l.jsx)(s.code,{children:"git_release_draft"})})," \u2014 Publish git release as draft."]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.a,{href:"#the-git_release_latest-field",children:(0,l.jsx)(s.code,{children:"git_release_latest"})})," \u2014 Publish git release as latest."]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.a,{href:"#the-git_tag_enable-field",children:(0,l.jsx)(s.code,{children:"git_tag_enable"})})," \u2014 Enable git tag."]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.a,{href:"#the-git_tag_name-field",children:(0,l.jsx)(s.code,{children:"git_tag_name"})})," \u2014 Customize git tag pattern."]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.a,{href:"#the-pr_branch_prefix-field",children:(0,l.jsx)(s.code,{children:"pr_branch_prefix"})})," \u2014 Release PR branch prefix."]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.a,{href:"#the-pr_draft-field",children:(0,l.jsx)(s.code,{children:"pr_draft"})})," \u2014 Open the release Pull Request as a draft."]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.a,{href:"#the-pr_name-field",children:(0,l.jsx)(s.code,{children:"pr_name"})})," \u2014 Customize the name of the release Pull Request."]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.a,{href:"#the-pr_body-field",children:(0,l.jsx)(s.code,{children:"pr_body"})})," \u2014 Customize the body of the release Pull Request."]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.a,{href:"#the-pr_labels-field",children:(0,l.jsx)(s.code,{children:"pr_labels"})})," \u2014 Add labels to the release Pull Request."]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.a,{href:"#the-publish-field",children:(0,l.jsx)(s.code,{children:"publish"})})," \u2014 Publish to cargo registry."]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.a,{href:"#the-publish_allow_dirty-field",children:(0,l.jsx)(s.code,{children:"publish_allow_dirty"})})," \u2014 Package dirty directories."]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.a,{href:"#the-publish_no_verify-field",children:(0,l.jsx)(s.code,{children:"publish_no_verify"})})," \u2014 Don't verify package build."]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.a,{href:"#the-publish_features-field",children:(0,l.jsx)(s.code,{children:"publish_features"})})," \u2014 List of features to pass to ",(0,l.jsx)(s.code,{children:"cargo publish"}),"."]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.a,{href:"#the-publish_all_features-field",children:(0,l.jsx)(s.code,{children:"publish_all_features"})})," \u2014 Pass ",(0,l.jsx)(s.code,{children:"--all-features"})," to ",(0,l.jsx)(s.code,{children:"cargo publish"}),"."]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.a,{href:"#the-publish_timeout-field",children:(0,l.jsx)(s.code,{children:"publish_timeout"})})," \u2014 ",(0,l.jsx)(s.code,{children:"cargo publish"})," timeout."]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.a,{href:"#the-release-field",children:(0,l.jsx)(s.code,{children:"release"})})," - Enable the processing of the packages."]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.a,{href:"#the-release_always-field",children:(0,l.jsx)(s.code,{children:"release_always"})})," - Release always or when you merge the release PR only."]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.a,{href:"#the-release_commits-field",children:(0,l.jsx)(s.code,{children:"release_commits"})})," - Customize which commits trigger a release."]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.a,{href:"#the-repo_url-field",children:(0,l.jsx)(s.code,{children:"repo_url"})})," \u2014 Repository URL."]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.a,{href:"#the-semver_check-field",children:(0,l.jsx)(s.code,{children:"semver_check"})})," \u2014 Run ",(0,l.jsx)(s.a,{href:"https://github.com/obi1kenobi/cargo-semver-checks",children:"cargo-semver-checks"}),"."]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.a,{href:"#the-package-section",children:(0,l.jsx)(s.code,{children:"[[package]]"})})," \u2014 Package-specific configurations.","\n",(0,l.jsxs)(s.ul,{children:["\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.a,{href:"#the-name-field",children:(0,l.jsx)(s.code,{children:"name"})})," \u2014 Package name. ",(0,l.jsx)(s.em,{children:"(Required)"}),"."]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.a,{href:"#the-changelog_include-field",children:(0,l.jsx)(s.code,{children:"changelog_include"})})," \u2014 Include commits from other packages."]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.a,{href:"#the-changelog_path-field-package-section",children:(0,l.jsx)(s.code,{children:"changelog_path"})})," \u2014 Changelog path."]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.a,{href:"#the-changelog_update-field-package-section",children:(0,l.jsx)(s.code,{children:"changelog_update"})})," \u2014 Update changelog."]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.a,{href:"#the-features_always_increment_minor-field-package-section",children:(0,l.jsx)(s.code,{children:"features_always_increment_minor"})}),"\n\u2014 Features increment minor in ",(0,l.jsx)(s.code,{children:"0.x"})," versions."]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.a,{href:"#the-git_release_enable-field-package-section",children:(0,l.jsx)(s.code,{children:"git_release_enable"})})," \u2014 Enable git release."]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.a,{href:"#the-git_release_name-field-package-section",children:(0,l.jsx)(s.code,{children:"git_release_name"})})," \u2014 Customize git release name pattern."]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.a,{href:"#the-git_release_body-field-package-section",children:(0,l.jsx)(s.code,{children:"git_release_body"})})," \u2014 Customize git release body pattern."]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.a,{href:"#the-git_release_type-field-package-section",children:(0,l.jsx)(s.code,{children:"git_release_type"})})," \u2014 Git release type."]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.a,{href:"#the-git_release_draft-field-package-section",children:(0,l.jsx)(s.code,{children:"git_release_draft"})})," \u2014 Publish git release as draft."]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.a,{href:"#the-git_release_latest-field-package-section",children:(0,l.jsx)(s.code,{children:"git_release_latest"})})," \u2014 Publish git release as latest."]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.a,{href:"#the-git_tag_enable-field-package-section",children:(0,l.jsx)(s.code,{children:"git_tag_enable"})})," \u2014 Enable git tag."]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.a,{href:"#the-git_tag_name-field-package-section",children:(0,l.jsx)(s.code,{children:"git_tag_name"})})," \u2014 Customize git tag pattern."]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.a,{href:"#the-publish-field-package-section",children:(0,l.jsx)(s.code,{children:"publish"})})," \u2014 Publish to cargo registry."]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.a,{href:"#the-publish_allow_dirty-field-package-section",children:(0,l.jsx)(s.code,{children:"publish_allow_dirty"})})," \u2014 Package dirty directories."]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.a,{href:"#the-publish_no_verify-field-package-section",children:(0,l.jsx)(s.code,{children:"publish_no_verify"})})," \u2014 Don't verify package build."]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.a,{href:"#the-publish_features-field-package-section",children:(0,l.jsx)(s.code,{children:"publish_features"})})," \u2014 List of\nfeatures to pass to ",(0,l.jsx)(s.code,{children:"cargo publish"}),"."]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.a,{href:"#the-publish_all_features-field-package-section",children:(0,l.jsx)(s.code,{children:"publish_all_features"})}),"\n\u2014 Pass ",(0,l.jsx)(s.code,{children:"--all-features"})," to ",(0,l.jsx)(s.code,{children:"cargo publish"}),"."]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.a,{href:"#the-release-field-package-section",children:(0,l.jsx)(s.code,{children:"release"})})," - Enable the processing of this package."]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.a,{href:"#the-semver_check-field-package-section",children:(0,l.jsx)(s.code,{children:"semver_check"})})," \u2014 Run ",(0,l.jsx)(s.a,{href:"https://github.com/obi1kenobi/cargo-semver-checks",children:"cargo-semver-checks"}),"."]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.a,{href:"#the-version_group-field",children:(0,l.jsx)(s.code,{children:"version_group"})})," \u2014 Group of packages with the same version."]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.a,{href:"#the-changelog-section",children:(0,l.jsx)(s.code,{children:"[changelog]"})})," \u2014 Changelog configuration.","\n",(0,l.jsxs)(s.ul,{children:["\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.a,{href:"#the-header-field",children:(0,l.jsx)(s.code,{children:"header"})})," \u2014 Changelog header."]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.a,{href:"#the-body-field",children:(0,l.jsx)(s.code,{children:"body"})})," \u2014 Changelog body."]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.a,{href:"#the-trim-field",children:(0,l.jsx)(s.code,{children:"trim"})})," \u2014 Trim the changelog body."]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.a,{href:"#the-protect_breaking_commits-field",children:(0,l.jsx)(s.code,{children:"protect_breaking_commits"})})," \u2014 Never skip commits\nwith breaking changes."]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.a,{href:"#the-tag_pattern-field",children:(0,l.jsx)(s.code,{children:"tag_pattern"})})," \u2014 Regex of tags to include in the changelog."]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.a,{href:"#the-sort_commits-field",children:(0,l.jsx)(s.code,{children:"sort_commits"})})," \u2014 How to sort commits."]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.a,{href:"#the-commit_preprocessors-field",children:(0,l.jsx)(s.code,{children:"commit_preprocessors"})})," \u2014 Manipulate commit messages."]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.a,{href:"#the-link_parsers-field",children:(0,l.jsx)(s.code,{children:"link_parsers"})})," \u2014 Parse links in commit messages."]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.a,{href:"#the-commit_parsers-field",children:(0,l.jsx)(s.code,{children:"commit_parsers"})})," \u2014 Organize commits into sections."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(s.h3,{id:"the-workspace-section",children:["The ",(0,l.jsx)(s.code,{children:"[workspace]"})," section"]}),"\n",(0,l.jsx)(s.p,{children:"Defines the global configuration, applied to all packages by default.\nThis section is optional, as well as all its fields."}),"\n",(0,l.jsx)(s.p,{children:"Here's an example configuration:"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-toml",children:'[workspace]\nallow_dirty = true # allow updating repositories with uncommitted changes\nchangelog_config = "config/git-cliff.toml"\nchangelog_update = false\ndependencies_update = true # update dependencies with `cargo update`\ngit_release_enable = true\npr_branch_prefix = "feat-pr-" # Release PR branch prefix\npublish_allow_dirty = true\npublish_no_verify = false\nrepo_url = "https://github.com/<owner>/<repo>"\nsemver_check = false\n'})}),"\n",(0,l.jsxs)(s.h4,{id:"the-allow_dirty-field",children:["The ",(0,l.jsx)(s.code,{children:"allow_dirty"})," field"]}),"\n",(0,l.jsxs)(s.ul,{children:["\n",(0,l.jsxs)(s.li,{children:["If ",(0,l.jsx)(s.code,{children:"true"}),", allow release-plz to update dirty working directories.\nA directory is considered dirty if it contains uncommitted changes.\nThe uncommitted changes will be part of the update."]}),"\n",(0,l.jsxs)(s.li,{children:["If ",(0,l.jsx)(s.code,{children:"false"}),", release-plz returns an error if the repository contains uncommitted changes. ",(0,l.jsx)(s.em,{children:"(Default)"}),"."]}),"\n"]}),"\n",(0,l.jsx)(s.admonition,{type:"caution",children:(0,l.jsxs)(s.p,{children:["This field is different from the ",(0,l.jsx)(s.code,{children:"allow-dirty"})," flag of the ",(0,l.jsx)(s.code,{children:"release-plz release"})," command.\nThis field only affects the ",(0,l.jsx)(s.code,{children:"release-plz update"})," and ",(0,l.jsx)(s.code,{children:"release-plz release-pr"})," command."]})}),"\n",(0,l.jsxs)(s.h4,{id:"the-changelog_config-field",children:["The ",(0,l.jsx)(s.code,{children:"changelog_config"})," field"]}),"\n",(0,l.jsxs)(s.p,{children:["Path to the ",(0,l.jsx)(s.a,{href:"https://git-cliff.org",children:"git-cliff"})," configuration file.\nIf unspecified, release-plz uses the ",(0,l.jsx)(s.a,{href:"https://keepachangelog.com/en/1.1.0/",children:"keep a changelog"})," format."]}),"\n",(0,l.jsxs)(s.admonition,{type:"warning",children:[(0,l.jsxs)(s.p,{children:["This field is deprecated.\nInstead of specifying a ",(0,l.jsx)(s.code,{children:"git-cliff"})," configuration file,\nuse the ",(0,l.jsx)(s.a,{href:"#the-changelog-section",children:"changelog"})," section instead."]}),(0,l.jsxs)(s.blockquote,{children:["\n",(0,l.jsxs)(s.p,{children:["Why do you prefer having a ",(0,l.jsx)(s.code,{children:"changelog"})," section in the ",(0,l.jsx)(s.code,{children:"release-plz.toml"})," file,\ninstead of having the changelog configuration in the ",(0,l.jsx)(s.code,{children:"git-cliff.toml"})," file?"]}),"\n"]}),(0,l.jsxs)(s.p,{children:["The ",(0,l.jsx)(s.code,{children:"git-cliff.toml"})," contains many options that release-plz doesn't use.\nTo avoid confusion, release-plz has a ",(0,l.jsx)(s.code,{children:"[changelog]"})," section,\ncontaining only the options it uses."]}),(0,l.jsxs)(s.p,{children:["Ideally, release-plz users shouldn't need to read the ",(0,l.jsx)(s.code,{children:"git-cliff"})," documentation\nto customize their changelog."]})]}),"\n",(0,l.jsxs)(s.h4,{id:"the-changelog_update-field",children:["The ",(0,l.jsx)(s.code,{children:"changelog_update"})," field"]}),"\n",(0,l.jsxs)(s.ul,{children:["\n",(0,l.jsxs)(s.li,{children:["If ",(0,l.jsx)(s.code,{children:"true"}),", update the changelog of the crates. ",(0,l.jsx)(s.em,{children:"(Default)"}),"."]}),"\n",(0,l.jsxs)(s.li,{children:["If ",(0,l.jsx)(s.code,{children:"false"}),", don't update changelogs."]}),"\n"]}),"\n",(0,l.jsxs)(s.p,{children:["This field can be overridden in the ",(0,l.jsx)(s.a,{href:"#the-package-section",children:(0,l.jsx)(s.code,{children:"[package]"})})," section."]}),"\n",(0,l.jsxs)(s.h4,{id:"the-dependencies_update-field",children:["The ",(0,l.jsx)(s.code,{children:"dependencies_update"})," field"]}),"\n",(0,l.jsxs)(s.ul,{children:["\n",(0,l.jsxs)(s.li,{children:["If ",(0,l.jsx)(s.code,{children:"true"}),", update all the dependencies in the ",(0,l.jsx)(s.code,{children:"Cargo.lock"})," file by running ",(0,l.jsx)(s.code,{children:"cargo update"}),"."]}),"\n",(0,l.jsxs)(s.li,{children:["If ",(0,l.jsx)(s.code,{children:"false"}),", only update the workspace packages by running ",(0,l.jsx)(s.code,{children:"cargo update --workspace"}),". ",(0,l.jsx)(s.em,{children:"(Default)"}),"."]}),"\n"]}),"\n",(0,l.jsxs)(s.h4,{id:"the-features_always_increment_minor-field",children:["The ",(0,l.jsx)(s.code,{children:"features_always_increment_minor"})," field"]}),"\n",(0,l.jsxs)(s.ul,{children:["\n",(0,l.jsxs)(s.li,{children:["If ",(0,l.jsx)(s.code,{children:"true"}),", feature commits will always bump the minor version, even in 0.x releases."]}),"\n",(0,l.jsxs)(s.li,{children:["If ",(0,l.jsx)(s.code,{children:"false"})," (default), feature commits will only bump the minor version starting with 1.x releases."]}),"\n"]}),"\n",(0,l.jsx)(s.admonition,{type:"warning",children:(0,l.jsxs)(s.p,{children:["This option violates the Cargo SemVer\n",(0,l.jsx)(s.a,{href:"https://doc.rust-lang.org/cargo/reference/semver.html",children:"rules"})," because the transition from\n",(0,l.jsx)(s.code,{children:"0.x"})," to ",(0,l.jsx)(s.code,{children:"0.(x+1)"})," is used for breaking changes.\nInstead, new features for ",(0,l.jsx)(s.code,{children:"0.x"})," should bump the version from ",(0,l.jsx)(s.code,{children:"0.x.y"})," to ",(0,l.jsx)(s.code,{children:"0.x.(y+1)"}),"."]})}),"\n",(0,l.jsxs)(s.h4,{id:"the-git_release_enable-field",children:["The ",(0,l.jsx)(s.code,{children:"git_release_enable"})," field"]}),"\n",(0,l.jsxs)(s.ul,{children:["\n",(0,l.jsxs)(s.li,{children:["If ",(0,l.jsx)(s.code,{children:"true"}),", release-plz creates a git release for the created tag. ",(0,l.jsx)(s.em,{children:"(Default)"}),"."]}),"\n",(0,l.jsxs)(s.li,{children:["If ",(0,l.jsx)(s.code,{children:"false"}),", release-plz doesn't create a git release."]}),"\n"]}),"\n",(0,l.jsx)(s.p,{children:"The supported git releases are:"}),"\n",(0,l.jsxs)(s.ul,{children:["\n",(0,l.jsx)(s.li,{children:(0,l.jsx)(s.a,{href:"https://docs.github.com/en/repositories/releasing-projects-on-github/managing-releases-in-a-repository",children:"GitHub"})}),"\n",(0,l.jsx)(s.li,{children:(0,l.jsx)(s.a,{href:"https://docs.gitea.io/en-us/",children:"Gitea"})}),"\n",(0,l.jsx)(s.li,{children:(0,l.jsx)(s.a,{href:"https://docs.gitlab.com/ee/user/project/releases/#releases",children:"GitLab"})}),"\n"]}),"\n",(0,l.jsxs)(s.h4,{id:"the-git_release_name-field",children:["The ",(0,l.jsx)(s.code,{children:"git_release_name"})," field"]}),"\n",(0,l.jsxs)(s.p,{children:[(0,l.jsx)(s.a,{href:"https://keats.github.io/tera/docs/#templates",children:"Tera template"})," of the git release name that\nrelease-plz creates.\nUse this to customize the git release name pattern."]}),"\n",(0,l.jsx)(s.p,{children:"By default, it's:"}),"\n",(0,l.jsxs)(s.ul,{children:["\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.code,{children:'"{{ package }}-v{{ version }}"'})," for workspaces containing more than one public package."]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.code,{children:'"v{{ version }}"'})," for projects containing a single crate or\nworkspaces containing just one public package."]}),"\n"]}),"\n",(0,l.jsx)(s.p,{children:"Where:"}),"\n",(0,l.jsxs)(s.ul,{children:["\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.code,{children:"{{ package }}"})," is the name of the package."]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.code,{children:"{{ version }}"})," is the new version of the package."]}),"\n"]}),"\n",(0,l.jsxs)(s.h4,{id:"the-git_release_body-field",children:["The ",(0,l.jsx)(s.code,{children:"git_release_body"})," field"]}),"\n",(0,l.jsxs)(s.p,{children:[(0,l.jsx)(s.a,{href:"https://keats.github.io/tera/docs/#templates",children:"Tera template"})," of the git release body that\nrelease-plz creates.\nUse this to customize the git release body pattern."]}),"\n",(0,l.jsxs)(s.p,{children:["By default, it's ",(0,l.jsx)(s.code,{children:'"{{ changelog }}"'}),"."]}),"\n",(0,l.jsxs)(s.p,{children:["In ",(0,l.jsx)(s.code,{children:"git_release_body"}),", you can use the following variables:"]}),"\n",(0,l.jsxs)(s.ul,{children:["\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.code,{children:"{{ changelog }}"}),": the changelog body of the new release."]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.code,{children:"{{ package }}"}),": the name of the package."]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.code,{children:"{{ version }}"}),": the new version of the package."]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.code,{children:"{{ remote.contributors }}"}),": array of contributors.\nI.e. the username of the authors of the PRs present in the changelog.\nThis means that your commit messages should contain the PR number, e.g. ",(0,l.jsx)(s.code,{children:"(#123)"}),"\nor ",(0,l.jsx)(s.code,{children:"([#1421](https://github.com/me/proj/pull/1421))"}),"."]}),"\n"]}),"\n",(0,l.jsxs)(s.admonition,{type:"tip",children:[(0,l.jsx)(s.p,{children:"To list the contributors at the end of the release you can do the following:"}),(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-toml",children:'git_release_body = """\n{{ changelog }}\n{% if remote.contributors %}\n### Contributors\n{% for contributor in remote.contributors %}\n* @{{ contributor.username }}\n{% endfor %}\n{% endif %}\n"""\n'})})]}),"\n",(0,l.jsxs)(s.h4,{id:"the-git_release_type-field",children:["The ",(0,l.jsx)(s.code,{children:"git_release_type"})," field"]}),"\n",(0,l.jsx)(s.p,{children:"Define whether to label the release as production or non-production ready.\nSupported values are:"}),"\n",(0,l.jsxs)(s.ul,{children:["\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.code,{children:'"prod"'}),": will mark the release as ready for production. ",(0,l.jsx)(s.em,{children:"(Default)"}),"."]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.code,{children:'"pre"'}),": will mark the release as not ready for production (pre-release)."]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.code,{children:'"auto"'}),":","\n",(0,l.jsxs)(s.ul,{children:["\n",(0,l.jsxs)(s.li,{children:["if there's a SemVer pre-release in the version (e.g. ",(0,l.jsx)(s.code,{children:"v1.0.0-rc1"}),"), will mark the release as\nnot ready for production (pre-release)."]}),"\n",(0,l.jsxs)(s.li,{children:["if there isn't a semver pre-release in the version (e.g. ",(0,l.jsx)(s.code,{children:"v1.0.0"}),"), will mark the release as\nready for production."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(s.p,{children:[(0,l.jsx)(s.em,{children:"(GitHub, Gitea only)"}),"."]}),"\n",(0,l.jsxs)(s.h4,{id:"the-git_release_draft-field",children:["The ",(0,l.jsx)(s.code,{children:"git_release_draft"})," field"]}),"\n",(0,l.jsxs)(s.ul,{children:["\n",(0,l.jsxs)(s.li,{children:["If ",(0,l.jsx)(s.code,{children:"true"}),", release-plz creates the git release as draft (unpublished)."]}),"\n",(0,l.jsxs)(s.li,{children:["If ",(0,l.jsx)(s.code,{children:"false"}),", release-plz publishes the created git release. ",(0,l.jsx)(s.em,{children:"(Default)"}),"."]}),"\n"]}),"\n",(0,l.jsxs)(s.p,{children:[(0,l.jsx)(s.em,{children:"(GitHub, Gitea only)"}),"."]}),"\n",(0,l.jsxs)(s.h4,{id:"the-git_release_latest-field",children:["The ",(0,l.jsx)(s.code,{children:"git_release_latest"})," field"]}),"\n",(0,l.jsxs)(s.ul,{children:["\n",(0,l.jsxs)(s.li,{children:["If ",(0,l.jsx)(s.code,{children:"true"}),", release-plz creates the git release as latest. ",(0,l.jsx)(s.em,{children:"(Default)"}),"."]}),"\n",(0,l.jsxs)(s.li,{children:["If ",(0,l.jsx)(s.code,{children:"false"}),", release-plz doesn't set the git release it creates as latest."]}),"\n"]}),"\n",(0,l.jsxs)(s.p,{children:[(0,l.jsx)(s.em,{children:"(GitHub only)"}),". Gitea doesn't support this feature."]}),"\n",(0,l.jsx)(s.admonition,{type:"warning",children:(0,l.jsx)(s.p,{children:"Drafts and prereleases cannot be set as latest."})}),"\n",(0,l.jsxs)(s.h4,{id:"the-git_tag_enable-field",children:["The ",(0,l.jsx)(s.code,{children:"git_tag_enable"})," field"]}),"\n",(0,l.jsxs)(s.ul,{children:["\n",(0,l.jsxs)(s.li,{children:["If ",(0,l.jsx)(s.code,{children:"true"}),", release-plz creates a git tag for the new package version. ",(0,l.jsx)(s.em,{children:"(Default)"}),"."]}),"\n",(0,l.jsxs)(s.li,{children:["If ",(0,l.jsx)(s.code,{children:"false"}),", release-plz doesn't create a git tag.\nNote: you can't create a git release without a git tag."]}),"\n"]}),"\n",(0,l.jsxs)(s.h4,{id:"the-git_tag_name-field",children:["The ",(0,l.jsx)(s.code,{children:"git_tag_name"})," field"]}),"\n",(0,l.jsxs)(s.p,{children:[(0,l.jsx)(s.a,{href:"https://keats.github.io/tera/docs/#templates",children:"Tera template"})," of the git tags that release-plz creates.\nUse this to customize the git tags name pattern."]}),"\n",(0,l.jsx)(s.p,{children:"By default, it's:"}),"\n",(0,l.jsxs)(s.ul,{children:["\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.code,{children:'"{{ package }}-v{{ version }}"'})," for workspaces containing more than one public package."]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.code,{children:'"v{{ version }}"'})," for projects containing a single crate or\nworkspaces containing just one public package."]}),"\n"]}),"\n",(0,l.jsx)(s.p,{children:"Where:"}),"\n",(0,l.jsxs)(s.ul,{children:["\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.code,{children:"{{ package }}"})," is the name of the package."]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.code,{children:"{{ version }}"})," is the new version of the package."]}),"\n"]}),"\n",(0,l.jsxs)(s.h4,{id:"the-pr_name-field",children:["The ",(0,l.jsx)(s.code,{children:"pr_name"})," field"]}),"\n",(0,l.jsxs)(s.p,{children:[(0,l.jsx)(s.a,{href:"https://keats.github.io/tera/docs/#templates",children:"Tera template"})," of pull request's name that\nrelease-plz creates."]}),"\n",(0,l.jsx)(s.p,{children:"By default, it's:"}),"\n",(0,l.jsxs)(s.ul,{children:["\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.code,{children:"chore({{ package }}): release v{{ version }}"})," for releasing only one package from a workspace with\nmultiple publishable packages.\nThis happens when only one package changed."]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.code,{children:"chore: release v{{ version }}"})," for releasing either:","\n",(0,l.jsxs)(s.ul,{children:["\n",(0,l.jsx)(s.li,{children:"the only package of the project"}),"\n",(0,l.jsx)(s.li,{children:"multiple packages with the same version"}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.code,{children:"chore: release"})," for releasing multiple packages with different versions."]}),"\n"]}),"\n",(0,l.jsx)(s.p,{children:"Where:"}),"\n",(0,l.jsxs)(s.ul,{children:["\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.code,{children:"{{ package }}"})," is the name of the package."]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.code,{children:"{{ version }}"})," is the new version of the package(s)."]}),"\n"]}),"\n",(0,l.jsx)(s.p,{children:"When using a custom template:"}),"\n",(0,l.jsxs)(s.ul,{children:["\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.code,{children:"{{ package }}"})," is populated only when releasing a single package."]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.code,{children:"{{ version }}"})," is populated only when releasing a single package or multiple packages with the\nsame version."]}),"\n"]}),"\n",(0,l.jsxs)(s.p,{children:["If you are in a workspace with multiple public packages, use ",(0,l.jsx)(s.code,{children:"{% if <variable> %}"})," to check if\nthese variables are set, otherwise release-plz will fail."]}),"\n",(0,l.jsx)(s.p,{children:"Here's an example of how you can customize the PR name template:"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-toml",children:'[workspace]\npr_name = "release{% if package and version %} {{ package }} v{{ version }}{% endif %}"\n'})}),"\n",(0,l.jsxs)(s.h4,{id:"the-pr_body-field",children:["The ",(0,l.jsx)(s.code,{children:"pr_body"})," field"]}),"\n",(0,l.jsxs)(s.p,{children:[(0,l.jsx)(s.a,{href:"https://keats.github.io/tera/docs/#templates",children:"Tera template"})," of pull request's body that\nrelease-plz creates."]}),"\n",(0,l.jsx)(s.p,{children:"By default it contains the summary of package updates, the changelog for each package, a section\nfor breaking changes, and a footer with credits for release-plz. If the text is longer than\n65536 characters, the changelog isn't inclued.\nThis limit is imposed by Github."}),"\n",(0,l.jsx)(s.p,{children:"Here is an example of how you can customize the PR body template:"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-toml",children:'[workspace]\npr_body = """\n{% for release in releases %}\n{% if release.title %}\n### {{release.title}}\n{% endif %}\nPackage: {{release.package}} {{release.previous_version}} -> {{release.next_version}}\n{% if release.changelog %}\nChanges:\n{{release.changelog}}\n{% endif %}\n{% endfor -%}\n"""\n'})}),"\n",(0,l.jsx)(s.p,{children:"Where:"}),"\n",(0,l.jsx)(s.admonition,{type:"warning",children:(0,l.jsxs)(s.p,{children:[(0,l.jsx)(s.code,{children:"{{ release.title }}"})," and ",(0,l.jsx)(s.code,{children:"{{ release.changelog }}"})," may be unset if the changelog could\nnot be parsed or it's not available. Please use ",(0,l.jsx)(s.code,{children:"{% if <variable> %}"})," structures\nto check for their existence."]})}),"\n",(0,l.jsxs)(s.ul,{children:["\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.code,{children:"{{ releases }}"})," - an array with the update information of each package."]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.code,{children:"{{ release.title }}"})," - the changelog title containing a link to the release tag diff.\n",(0,l.jsx)(s.em,{children:"(Optional)"}),"."]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.code,{children:"{{ release.package }}"})," - the name of the package being updated."]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.code,{children:"{{ release.changelog }}"})," - the generated changelog. ",(0,l.jsx)(s.em,{children:"(Optional)"}),"."]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.code,{children:"{{ release.previous_version }}"})," - the previous version of the package."]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.code,{children:"{{ release.next_version }}"})," - the version of the package being released."]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.code,{children:"{{ release.semver_check }}"}),' - the semver check outcome.\nOne of: "compatible", "incompatible", "skipped".']}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.code,{children:"{{ release.breaking_changes }}"})," - the summary of the breaking changes of the package being\nreleased. ",(0,l.jsx)(s.em,{children:"(Optional)"}),"."]}),"\n"]}),"\n",(0,l.jsx)(s.p,{children:"The default PR body template is the following:"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-toml",children:'[workspace]\npr_body = """\n{% macro get_changes(releases, type="text") %}\n{%- for release in releases %}\n{%- if release.title and release.changelog %}{% if releases | length > 1 %}\n## `{{ release.package }}`\n{% endif %}\n<blockquote>\n\n## {{ release.title }}\n\n{{ release.changelog }}\n</blockquote>{% endif %}\n{% endfor %}\n{% endmacro -%}\n\n{% set changes = self::get_changes(releases=releases) %}\n\n## \ud83e\udd16 New release\n{% for release in releases %}\n* `{{ release.package }}`: {% if release.previous_version and release.previous_version != release.next_version %}{{ release.previous_version }} -> {% endif %}{{ release.next_version }}{% if release.semver_check == "incompatible" %} (\u26a0 API breaking changes){% elif release.semver_check == "compatible" %} (\u2713 API compatible changes){% endif %}\n{%- endfor %}\n{%- for release in releases %}{% if release.breaking_changes %}\n\n### \u26a0 `{{ release.package }}` breaking changes\n\n```text\n{{ release.breaking_changes }}\n```{% endif %}{% endfor %}\n{% if changes %}\n<details><summary><i><b>Changelog</b></i></summary><p>\n{{ changes }}\n</p></details>\n{% endif %}\n---\nThis PR was generated with [release-plz](https://github.com/release-plz/release-plz/).\n"""\n'})}),"\n",(0,l.jsxs)(s.h4,{id:"the-pr_branch_prefix-field",children:["The ",(0,l.jsx)(s.code,{children:"pr_branch_prefix"})," field"]}),"\n",(0,l.jsxs)(s.p,{children:["Prefix for the release PR branch. By default, it's set to: ",(0,l.jsx)(s.code,{children:"release-plz-"})]}),"\n",(0,l.jsx)(s.admonition,{type:"warning",children:(0,l.jsx)(s.p,{children:"Before changing the release-plz branch you should close the old release PR."})}),"\n",(0,l.jsxs)(s.h4,{id:"the-pr_draft-field",children:["The ",(0,l.jsx)(s.code,{children:"pr_draft"})," field"]}),"\n",(0,l.jsxs)(s.ul,{children:["\n",(0,l.jsxs)(s.li,{children:["If ",(0,l.jsx)(s.code,{children:"true"}),", release-plz creates the release PR as a draft."]}),"\n",(0,l.jsxs)(s.li,{children:["If ",(0,l.jsx)(s.code,{children:"false"}),", release-plz creates the release PR as ready for review. ",(0,l.jsx)(s.em,{children:"(Default)"}),"."]}),"\n"]}),"\n",(0,l.jsxs)(s.h4,{id:"the-pr_labels-field",children:["The ",(0,l.jsx)(s.code,{children:"pr_labels"})," field"]}),"\n",(0,l.jsx)(s.p,{children:"Add labels to the Pull Request opened by release-plz."}),"\n",(0,l.jsx)(s.p,{children:"Example:"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-toml",children:'[workspace]\npr_labels = ["release"] # add the `release` label to the release Pull Request\n'})}),"\n",(0,l.jsxs)(s.p,{children:["By default, release-plz doesn't add any label.\nI.e. the ",(0,l.jsx)(s.code,{children:"pr_labels"})," array is empty."]}),"\n",(0,l.jsxs)(s.h4,{id:"the-publish-field",children:["The ",(0,l.jsx)(s.code,{children:"publish"})," field"]}),"\n",(0,l.jsx)(s.p,{children:"Publish to cargo registry."}),"\n",(0,l.jsxs)(s.ul,{children:["\n",(0,l.jsxs)(s.li,{children:["If ",(0,l.jsx)(s.code,{children:"true"}),", ",(0,l.jsx)(s.code,{children:"release-plz"})," runs ",(0,l.jsx)(s.code,{children:"cargo publish"}),". ",(0,l.jsx)(s.em,{children:"(Default)"}),"."]}),"\n",(0,l.jsxs)(s.li,{children:["If ",(0,l.jsx)(s.code,{children:"false"}),", ",(0,l.jsx)(s.code,{children:"release-plz"})," doesn't run ",(0,l.jsx)(s.code,{children:"cargo publish"}),"."]}),"\n"]}),"\n",(0,l.jsxs)(s.p,{children:["With this option disabled, release-plz will continue creating git tags.\nHowever, note that release-plz will still use the cargo registry to check what's the latest\nrelease, so you still need to run ",(0,l.jsx)(s.code,{children:"cargo publish"})," by yourself."]}),"\n",(0,l.jsxs)(s.h4,{id:"the-publish_allow_dirty-field",children:["The ",(0,l.jsx)(s.code,{children:"publish_allow_dirty"})," field"]}),"\n",(0,l.jsx)(s.p,{children:"Allow dirty working directories to be packaged."}),"\n",(0,l.jsxs)(s.ul,{children:["\n",(0,l.jsxs)(s.li,{children:["If ",(0,l.jsx)(s.code,{children:"true"}),", ",(0,l.jsx)(s.code,{children:"release-plz"})," adds the ",(0,l.jsx)(s.code,{children:"--allow-dirty"})," flag to ",(0,l.jsx)(s.code,{children:"cargo publish"}),"."]}),"\n",(0,l.jsxs)(s.li,{children:["If ",(0,l.jsx)(s.code,{children:"false"}),", ",(0,l.jsx)(s.code,{children:"cargo publish"})," fails if your repository contains uncommitted changes. ",(0,l.jsx)(s.em,{children:"(Default)"}),"."]}),"\n"]}),"\n",(0,l.jsxs)(s.h4,{id:"the-publish_no_verify-field",children:["The ",(0,l.jsx)(s.code,{children:"publish_no_verify"})," field"]}),"\n",(0,l.jsx)(s.p,{children:"Don't verify the contents by building them."}),"\n",(0,l.jsxs)(s.ul,{children:["\n",(0,l.jsxs)(s.li,{children:["If ",(0,l.jsx)(s.code,{children:"true"}),", ",(0,l.jsx)(s.code,{children:"release-plz"})," adds the ",(0,l.jsx)(s.code,{children:"--no-verify"})," flag to ",(0,l.jsx)(s.code,{children:"cargo publish"}),"."]}),"\n",(0,l.jsxs)(s.li,{children:["If ",(0,l.jsx)(s.code,{children:"false"}),", ",(0,l.jsx)(s.code,{children:"cargo publish"})," fails if your repository doesn't build. ",(0,l.jsx)(s.em,{children:"(Default)"}),"."]}),"\n"]}),"\n",(0,l.jsxs)(s.h4,{id:"the-publish_features-field",children:["The ",(0,l.jsx)(s.code,{children:"publish_features"})," field"]}),"\n",(0,l.jsxs)(s.p,{children:["Pass a list of features to use for verification by ",(0,l.jsx)(s.code,{children:"cargo publish"}),"."]}),"\n",(0,l.jsxs)(s.ul,{children:["\n",(0,l.jsxs)(s.li,{children:["If set to a list of features (e.g. ",(0,l.jsx)(s.code,{children:'["a", "b"]'}),"), ",(0,l.jsx)(s.code,{children:"release-plz"})," adds ",(0,l.jsx)(s.code,{children:"--features=a,b"})," flag to\n",(0,l.jsx)(s.code,{children:"cargo publish"}),"."]}),"\n",(0,l.jsxs)(s.li,{children:["If not set or if it is empty, no list of features will be passed to ",(0,l.jsx)(s.code,{children:"cargo publish"}),"."]}),"\n"]}),"\n",(0,l.jsxs)(s.h4,{id:"the-publish_all_features-field",children:["The ",(0,l.jsx)(s.code,{children:"publish_all_features"})," field"]}),"\n",(0,l.jsxs)(s.p,{children:["Whether to pass the ",(0,l.jsx)(s.code,{children:"--all-features"})," to ",(0,l.jsx)(s.code,{children:"cargo publish"})," when verifying."]}),"\n",(0,l.jsxs)(s.ul,{children:["\n",(0,l.jsxs)(s.li,{children:["If ",(0,l.jsx)(s.code,{children:"true"}),", ",(0,l.jsx)(s.code,{children:"release-plz"})," adds the ",(0,l.jsx)(s.code,{children:"--all-features"})," flag to ",(0,l.jsx)(s.code,{children:"cargo publish"}),"."]}),"\n",(0,l.jsxs)(s.li,{children:["If ",(0,l.jsx)(s.code,{children:"false"}),", ",(0,l.jsx)(s.code,{children:"release-plz"})," doesn't add the ",(0,l.jsx)(s.code,{children:"--all-features"})," flag to ",(0,l.jsx)(s.code,{children:"cargo publish"}),"."]}),"\n"]}),"\n",(0,l.jsxs)(s.h4,{id:"the-publish_timeout-field",children:["The ",(0,l.jsx)(s.code,{children:"publish_timeout"})," field"]}),"\n",(0,l.jsx)(s.p,{children:"The timeout used when:"}),"\n",(0,l.jsxs)(s.ul,{children:["\n",(0,l.jsxs)(s.li,{children:["publishing a crate, i.e. ",(0,l.jsx)(s.code,{children:"cargo publish"}),"."]}),"\n",(0,l.jsx)(s.li,{children:"checking if a crate is published."}),"\n"]}),"\n",(0,l.jsxs)(s.p,{children:["It's a string in the format ",(0,l.jsx)(s.code,{children:"<duration><unit>"}),". E.g.:"]}),"\n",(0,l.jsxs)(s.ul,{children:["\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.code,{children:"30s"})," \u2014 30 seconds"]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.code,{children:"10m"})," \u2014 10 minutes"]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.code,{children:"1h"})," \u2014 1 hour"]}),"\n"]}),"\n",(0,l.jsx)(s.p,{children:"Example:"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-toml",children:'[workspace]\npublish_timeout = "10m"\n'})}),"\n",(0,l.jsxs)(s.p,{children:["By default, this timeout is set to ",(0,l.jsx)(s.code,{children:"30m"}),"."]}),"\n",(0,l.jsx)(s.p,{children:"This timeout is useful when there are some problems regarding the cargo\nregistry or local configuration, allowing to:"}),"\n",(0,l.jsxs)(s.ul,{children:["\n",(0,l.jsx)(s.li,{children:"avoid CI job to run forever."}),"\n",(0,l.jsx)(s.li,{children:"have a more precise error message."}),"\n"]}),"\n",(0,l.jsxs)(s.h4,{id:"the-release-field",children:["The ",(0,l.jsx)(s.code,{children:"release"})," field"]}),"\n",(0,l.jsxs)(s.p,{children:["Process the packages for the ",(0,l.jsx)(s.code,{children:"update"}),", ",(0,l.jsx)(s.code,{children:"release-pr"}),", and ",(0,l.jsx)(s.code,{children:"release"})," commands."]}),"\n",(0,l.jsxs)(s.ul,{children:["\n",(0,l.jsxs)(s.li,{children:["If ",(0,l.jsx)(s.code,{children:"true"}),", all packages will be processed. ",(0,l.jsx)(s.em,{children:"(Default)"}),"."]}),"\n",(0,l.jsxs)(s.li,{children:["If ",(0,l.jsx)(s.code,{children:"false"}),", no packages will be processed.\nRelease-plz doesn't update the package, and doesn't release it (i.e. cargo publish, git tag\nand github/gitea/gitlab release).\nRelease-plz ignores all packages."]}),"\n"]}),"\n",(0,l.jsxs)(s.p,{children:["Setting ",(0,l.jsx)(s.code,{children:"release"})," as ",(0,l.jsx)(s.code,{children:"false"})," at the workspace level,\nis useful in big workspaces, where you don't want release-plz to manage all crates.\nYou can set ",(0,l.jsx)(s.code,{children:"release"})," as ",(0,l.jsx)(s.code,{children:"true"})," only in the packages you want release-plz to handle, by overriding\nthis configuration at the ",(0,l.jsx)(s.a,{href:"#the-package-section",children:(0,l.jsx)(s.code,{children:"[[package]]"})})," level."]}),"\n",(0,l.jsx)(s.p,{children:"Example:"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-toml",children:"[workspace]\nrelease = false\n"})}),"\n",(0,l.jsxs)(s.h4,{id:"the-release_always-field",children:["The ",(0,l.jsx)(s.code,{children:"release_always"})," field"]}),"\n",(0,l.jsxs)(s.ul,{children:["\n",(0,l.jsxs)(s.li,{children:["\n",(0,l.jsxs)(s.p,{children:["If true, ",(0,l.jsx)(s.code,{children:"release-plz release"})," will try to release your packages every time you run it\n(e.g. on every commit in the main branch). ",(0,l.jsx)(s.em,{children:"(Default)"}),"."]}),"\n",(0,l.jsx)(s.admonition,{type:"warning",children:(0,l.jsxs)(s.p,{children:["In this case, every package is published as soon as you commit it.\nAlso, if you merge your PRs with the\n",(0,l.jsx)(s.a,{href:"https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/incorporating-changes-from-a-pull-request/about-pull-request-merges#squash-and-merge-your-commits",children:"squash"}),"\nstrategy, there could be a race condition if you merge a PR before ",(0,l.jsx)(s.code,{children:"release-plz release"}),"\nfinished on the main branch. For more info about this issue, see\n",(0,l.jsx)(s.a,{href:"/docs/usage/release#what-commit-is-released",children:"what commit is released"}),"."]})}),"\n"]}),"\n",(0,l.jsxs)(s.li,{children:["\n",(0,l.jsxs)(s.p,{children:["If false, ",(0,l.jsx)(s.code,{children:"release-plz release"})," will try to release your packages only when you merge the\nrelease PR.\nUse ",(0,l.jsx)(s.code,{children:"release_always = false"})," if you want to commit your packages and publish them later,\ninstead of publishing them as soon as you commit them."]}),"\n",(0,l.jsx)(s.admonition,{type:"info",children:(0,l.jsxs)(s.p,{children:["To do this, release-plz checks if the latest commit is\n",(0,l.jsx)(s.a,{href:"https://docs.github.com/en/rest/commits/commits?apiVersion=2022-11-28#list-pull-requests-associated-with-a-commit",children:"associated"}),"\nto a release PR.\nTo determine if a PR is a release-pr, release-plz will check if the branch of the PR starts with\n",(0,l.jsx)(s.code,{children:"release-plz-"}),". So if you want to create a PR that should trigger a release\n(e.g. when you fix the CI), use this branch name format (e.g. ",(0,l.jsx)(s.code,{children:"release-plz-fix-ci"}),")."]})}),"\n",(0,l.jsx)(s.admonition,{type:"info",children:(0,l.jsxs)(s.p,{children:["The release pr is opened only when a file of the package is updated.\nTo verify your packaged files, run ",(0,l.jsx)(s.code,{children:"cargo package --list"}),"."]})}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(s.p,{children:"Example:"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-toml",children:"[workspace]\nrelease_always = false\n"})}),"\n",(0,l.jsx)(s.admonition,{type:"info",children:(0,l.jsxs)(s.p,{children:["Supported on GitHub only.\nGitea should work when they implement the\n",(0,l.jsx)(s.code,{children:"/repos/{owner}/{repo}/commits/{sha}/pull"}),"\nAPI (maybe in Gitea 1.22?)."]})}),"\n",(0,l.jsxs)(s.h4,{id:"the-release_commits-field",children:["The ",(0,l.jsx)(s.code,{children:"release_commits"})," field"]}),"\n",(0,l.jsxs)(s.p,{children:["In ",(0,l.jsx)(s.code,{children:"release-plz update"})," and ",(0,l.jsx)(s.code,{children:"release-plz release-pr"}),", ",(0,l.jsx)(s.code,{children:"release-plz"})," bumps the version and updates\nthe changelog of the package only if at least one of the commits matches the ",(0,l.jsx)(s.code,{children:"release_commits"}),"\nregex."]}),"\n",(0,l.jsx)(s.p,{children:"You can use this if you think it is too noisy to raise PRs on every commit."}),"\n",(0,l.jsx)(s.p,{children:"Examples:"}),"\n",(0,l.jsxs)(s.ul,{children:["\n",(0,l.jsxs)(s.li,{children:["With ",(0,l.jsx)(s.code,{children:'release_commits = "^feat[(:]"'}),", release-plz will update the package only if there's a new feature.\nThe regex matches strings starting with ",(0,l.jsx)(s.code,{children:"feat:"})," or ",(0,l.jsx)(s.code,{children:"feat("}),"."]}),"\n",(0,l.jsxs)(s.li,{children:["With ",(0,l.jsx)(s.code,{children:'release_commits = "^(feat|docs)[(:]'}),", release-plz will update the package only if there's a\nnew feature or a documentation change."]}),"\n"]}),"\n",(0,l.jsx)(s.p,{children:"By default, release-plz updates the package on every commit."}),"\n",(0,l.jsx)(s.admonition,{type:"warning",children:(0,l.jsxs)(s.p,{children:["The filtered commits are still included in the changelog.\nTo exclude certain commits from the changelog, use the ",(0,l.jsx)(s.a,{href:"#the-commit_parsers-field",children:"commit_parsers"})," field."]})}),"\n",(0,l.jsxs)(s.h4,{id:"the-repo_url-field",children:["The ",(0,l.jsx)(s.code,{children:"repo_url"})," field"]}),"\n",(0,l.jsx)(s.p,{children:"GitHub/Gitea repository URL where your project is hosted.\nIt is used to generate the changelog release link and open the PR.\nNormally, you don't need to set this field,\nbecause release-plz defaults to the URL of the default git remote."}),"\n",(0,l.jsxs)(s.h4,{id:"the-semver_check-field",children:["The ",(0,l.jsx)(s.code,{children:"semver_check"})," field"]}),"\n",(0,l.jsxs)(s.p,{children:["With this field, you can tell release-plz to run ",(0,l.jsx)(s.a,{href:"https://github.com/obi1kenobi/cargo-semver-checks",children:"cargo-semver-checks"})," to check\nAPI breaking changes of your package:"]}),"\n",(0,l.jsxs)(s.ul,{children:["\n",(0,l.jsxs)(s.li,{children:["If ",(0,l.jsx)(s.code,{children:"true"}),", run it. ",(0,l.jsx)(s.em,{children:"(Default)"}),"."]}),"\n",(0,l.jsxs)(s.li,{children:["If ",(0,l.jsx)(s.code,{children:"false"}),", don't run it."]}),"\n"]}),"\n",(0,l.jsx)(s.admonition,{type:"info",children:(0,l.jsxs)(s.p,{children:[(0,l.jsx)(s.a,{href:"https://github.com/obi1kenobi/cargo-semver-checks",children:"cargo-semver-checks"})," only works with packages containing a library."]})}),"\n",(0,l.jsxs)(s.p,{children:["This field can be overridden in the ",(0,l.jsx)(s.a,{href:"#the-package-section",children:(0,l.jsx)(s.code,{children:"[package]"})})," section."]}),"\n",(0,l.jsxs)(s.h3,{id:"the-package-section",children:["The ",(0,l.jsx)(s.code,{children:"[[package]]"})," section"]}),"\n",(0,l.jsxs)(s.p,{children:["In this section, you can override some of the ",(0,l.jsx)(s.code,{children:"workspace"})," fields for specific packages."]}),"\n",(0,l.jsxs)(s.p,{children:["Here's an example configuration where we override the configuration of the ",(0,l.jsx)(s.code,{children:"my_package"})," package:"]}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-toml",children:'[[package]]\nname = "my_package"\nchangelog_path = "docs/CHANGELOG.md"\nsemver_check = false\nchangelog_update = false\ngit_release_enable = true\npublish = true\npublish_allow_dirty = true\npublish_no_verify = true\n'})}),"\n",(0,l.jsxs)(s.h4,{id:"the-name-field",children:["The ",(0,l.jsx)(s.code,{children:"name"})," field"]}),"\n",(0,l.jsxs)(s.p,{children:["Name of the package to which the configuration applies.\n",(0,l.jsx)(s.em,{children:"(Required field)"}),"."]}),"\n",(0,l.jsxs)(s.h4,{id:"the-changelog_include-field",children:["The ",(0,l.jsx)(s.code,{children:"changelog_include"})," field"]}),"\n",(0,l.jsxs)(s.p,{children:["By default, release-plz populates the changelog of a package with commits\ncontaining changes in files of the package directory.\nYou can use the ",(0,l.jsx)(s.code,{children:"changelog_include"})," field to include commits that belong to other packages.\nFor example, the changelog of the ",(0,l.jsx)(s.code,{children:"release-plz"})," package of this repository\nincludes commits of the ",(0,l.jsx)(s.code,{children:"release_plz_core"})," package, because they affect the\n",(0,l.jsx)(s.code,{children:"release-plz"})," package, too."]}),"\n",(0,l.jsx)(s.p,{children:"Example:"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-toml",children:'changelog_include = ["release_plz_core"]\n'})}),"\n",(0,l.jsxs)(s.h4,{id:"the-changelog_path-field-package-section",children:["The ",(0,l.jsx)(s.code,{children:"changelog_path"})," field (",(0,l.jsx)(s.code,{children:"package"})," section)"]}),"\n",(0,l.jsxs)(s.p,{children:["By default, release-plz looks for the changelog in the ",(0,l.jsx)(s.code,{children:"CHANGELOG.md"})," file\nof the same directory of the ",(0,l.jsx)(s.code,{children:"Cargo.toml"})," of the package:"]}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-txt",children:".\n\u251c\u2500\u2500 src/\n\u251c\u2500\u2500 CHANGELOG.md\n\u2514\u2500\u2500 Cargo.toml\n"})}),"\n",(0,l.jsx)(s.p,{children:"If the changelog of a package is in a different location, you can specify it with this field."}),"\n",(0,l.jsxs)(s.p,{children:["This field is relative to the root ",(0,l.jsx)(s.code,{children:"Cargo.toml"})," file.\nIn GitHub Actions, this is the root of the repository."]}),"\n",(0,l.jsxs)(s.p,{children:["This field cannot be set in the ",(0,l.jsx)(s.code,{children:"[workspace]"})," section."]}),"\n",(0,l.jsxs)(s.h4,{id:"the-changelog_update-field-package-section",children:["The ",(0,l.jsx)(s.code,{children:"changelog_update"})," field (",(0,l.jsx)(s.code,{children:"package"})," section)"]}),"\n",(0,l.jsxs)(s.ul,{children:["\n",(0,l.jsxs)(s.li,{children:["If ",(0,l.jsx)(s.code,{children:"true"}),", update the changelog of this package. ",(0,l.jsx)(s.em,{children:"(Default)"}),"."]}),"\n",(0,l.jsxs)(s.li,{children:["If ",(0,l.jsx)(s.code,{children:"false"}),", don't."]}),"\n"]}),"\n",(0,l.jsxs)(s.h4,{id:"the-features_always_increment_minor-field-package-section",children:["The ",(0,l.jsx)(s.code,{children:"features_always_increment_minor"})," field (",(0,l.jsx)(s.code,{children:"package"})," section)"]}),"\n",(0,l.jsxs)(s.p,{children:["Overrides the ",(0,l.jsx)(s.a,{href:"#the-features_always_increment_minor-field",children:(0,l.jsx)(s.code,{children:"workspace.features_always_increment_minor"})}),"\nfield."]}),"\n",(0,l.jsxs)(s.h4,{id:"the-git_release_enable-field-package-section",children:["The ",(0,l.jsx)(s.code,{children:"git_release_enable"})," field (",(0,l.jsx)(s.code,{children:"package"})," section)"]}),"\n",(0,l.jsxs)(s.p,{children:["Overrides the ",(0,l.jsx)(s.a,{href:"#the-git_release_enable-field",children:(0,l.jsx)(s.code,{children:"workspace.git_release_enable"})})," field."]}),"\n",(0,l.jsxs)(s.h4,{id:"the-git_release_name-field-package-section",children:["The ",(0,l.jsx)(s.code,{children:"git_release_name"})," field (",(0,l.jsx)(s.code,{children:"package"})," section)"]}),"\n",(0,l.jsxs)(s.p,{children:["Overrides the ",(0,l.jsx)(s.a,{href:"#the-git_release_name-field",children:(0,l.jsx)(s.code,{children:"workspace.git_release_name"})})," field."]}),"\n",(0,l.jsxs)(s.h4,{id:"the-git_release_body-field-package-section",children:["The ",(0,l.jsx)(s.code,{children:"git_release_body"})," field (",(0,l.jsx)(s.code,{children:"package"})," section)"]}),"\n",(0,l.jsxs)(s.p,{children:["Overrides the ",(0,l.jsx)(s.a,{href:"#the-git_release_body-field",children:(0,l.jsx)(s.code,{children:"workspace.git_release_body"})})," field."]}),"\n",(0,l.jsxs)(s.h4,{id:"the-git_release_type-field-package-section",children:["The ",(0,l.jsx)(s.code,{children:"git_release_type"})," field (",(0,l.jsx)(s.code,{children:"package"})," section)"]}),"\n",(0,l.jsxs)(s.p,{children:["Overrides the ",(0,l.jsx)(s.a,{href:"#the-git_release_type-field",children:(0,l.jsx)(s.code,{children:"workspace.git_release_type"})})," field."]}),"\n",(0,l.jsxs)(s.h4,{id:"the-git_release_draft-field-package-section",children:["The ",(0,l.jsx)(s.code,{children:"git_release_draft"})," field (",(0,l.jsx)(s.code,{children:"package"})," section)"]}),"\n",(0,l.jsxs)(s.p,{children:["Overrides the ",(0,l.jsx)(s.a,{href:"#the-git_release_draft-field",children:(0,l.jsx)(s.code,{children:"workspace.git_release_draft"})})," field."]}),"\n",(0,l.jsxs)(s.h4,{id:"the-git_release_latest-field-package-section",children:["The ",(0,l.jsx)(s.code,{children:"git_release_latest"})," field (",(0,l.jsx)(s.code,{children:"package"})," section)"]}),"\n",(0,l.jsxs)(s.p,{children:["Overrides the ",(0,l.jsx)(s.a,{href:"#the-git_release_latest-field",children:(0,l.jsx)(s.code,{children:"workspace.git_release_latest"})})," field."]}),"\n",(0,l.jsxs)(s.h4,{id:"the-git_tag_enable-field-package-section",children:["The ",(0,l.jsx)(s.code,{children:"git_tag_enable"})," field (",(0,l.jsx)(s.code,{children:"package"})," section)"]}),"\n",(0,l.jsxs)(s.p,{children:["Overrides the ",(0,l.jsx)(s.a,{href:"#the-git_tag_enable-field",children:(0,l.jsx)(s.code,{children:"workspace.git_tag_enable"})})," field."]}),"\n",(0,l.jsxs)(s.h4,{id:"the-git_tag_name-field-package-section",children:["The ",(0,l.jsx)(s.code,{children:"git_tag_name"})," field (",(0,l.jsx)(s.code,{children:"package"})," section)"]}),"\n",(0,l.jsxs)(s.p,{children:["Overrides the ",(0,l.jsx)(s.a,{href:"#the-git_tag_name-field",children:(0,l.jsx)(s.code,{children:"workspace.git_tag_name"})})," field."]}),"\n",(0,l.jsxs)(s.h4,{id:"the-publish-field-package-section",children:["The ",(0,l.jsx)(s.code,{children:"publish"})," field (",(0,l.jsx)(s.code,{children:"package"})," section)"]}),"\n",(0,l.jsxs)(s.p,{children:["Overrides the ",(0,l.jsx)(s.a,{href:"#the-publish-field",children:(0,l.jsx)(s.code,{children:"workspace.publish"})})," field."]}),"\n",(0,l.jsxs)(s.h4,{id:"the-publish_allow_dirty-field-package-section",children:["The ",(0,l.jsx)(s.code,{children:"publish_allow_dirty"})," field (",(0,l.jsx)(s.code,{children:"package"})," section)"]}),"\n",(0,l.jsxs)(s.p,{children:["Overrides the\n",(0,l.jsx)(s.a,{href:"#the-publish_allow_dirty-field",children:(0,l.jsx)(s.code,{children:"workspace.publish_allow_dirty"})})," field."]}),"\n",(0,l.jsxs)(s.h4,{id:"the-publish_no_verify-field-package-section",children:["The ",(0,l.jsx)(s.code,{children:"publish_no_verify"})," field (",(0,l.jsx)(s.code,{children:"package"})," section)"]}),"\n",(0,l.jsxs)(s.p,{children:["Overrides the ",(0,l.jsx)(s.a,{href:"#the-publish_no_verify-field",children:(0,l.jsx)(s.code,{children:"workspace.publish_no_verify"})})," field."]}),"\n",(0,l.jsxs)(s.h4,{id:"the-publish_features-field-package-section",children:["The ",(0,l.jsx)(s.code,{children:"publish_features"})," field (",(0,l.jsx)(s.code,{children:"package"})," section)"]}),"\n",(0,l.jsxs)(s.p,{children:["Overrides the ",(0,l.jsx)(s.a,{href:"#the-publish_features-field",children:(0,l.jsx)(s.code,{children:"workspace.publish_features"})})," field."]}),"\n",(0,l.jsxs)(s.h4,{id:"the-publish_all_features-field-package-section",children:["The ",(0,l.jsx)(s.code,{children:"publish_all_features"})," field (",(0,l.jsx)(s.code,{children:"package"})," section)"]}),"\n",(0,l.jsxs)(s.p,{children:["Overrides the ",(0,l.jsx)(s.a,{href:"#the-publish_all_features-field",children:(0,l.jsx)(s.code,{children:"workspace.publish_all_features"})})," field."]}),"\n",(0,l.jsxs)(s.h4,{id:"the-release-field-package-section",children:["The ",(0,l.jsx)(s.code,{children:"release"})," field (",(0,l.jsx)(s.code,{children:"package"})," section)"]}),"\n",(0,l.jsxs)(s.p,{children:["Overrides the ",(0,l.jsx)(s.a,{href:"#the-release-field",children:(0,l.jsx)(s.code,{children:"workspace.release"})})," field."]}),"\n",(0,l.jsxs)(s.h4,{id:"the-semver_check-field-package-section",children:["The ",(0,l.jsx)(s.code,{children:"semver_check"})," field (",(0,l.jsx)(s.code,{children:"package"})," section)"]}),"\n",(0,l.jsxs)(s.ul,{children:["\n",(0,l.jsxs)(s.li,{children:["If ",(0,l.jsx)(s.code,{children:"true"}),", run ",(0,l.jsx)(s.a,{href:"https://github.com/obi1kenobi/cargo-semver-checks",children:"cargo-semver-checks"})," for this package."]}),"\n",(0,l.jsxs)(s.li,{children:["If ",(0,l.jsx)(s.code,{children:"false"}),", don't."]}),"\n"]}),"\n",(0,l.jsxs)(s.p,{children:["By default, release-plz runs ",(0,l.jsx)(s.a,{href:"https://github.com/obi1kenobi/cargo-semver-checks",children:"cargo-semver-checks"})," if the package is a library."]}),"\n",(0,l.jsxs)(s.h4,{id:"the-version_group-field",children:["The ",(0,l.jsx)(s.code,{children:"version_group"})," field"]}),"\n",(0,l.jsxs)(s.p,{children:["The name of a group of packages that needs to have the same version.\nIf two or more packages share the same ",(0,l.jsx)(s.code,{children:"version_group"})," then release-plz will\nassign the same version to them (the highest among the next versions of the packages)."]}),"\n",(0,l.jsx)(s.admonition,{type:"tip",children:(0,l.jsxs)(s.p,{children:["Think of this as having a ",(0,l.jsx)(s.code,{children:"Cargo.toml"})," workspace version shared among subgroups of packages\ninstead of the entire workspace."]})}),"\n",(0,l.jsxs)(s.p,{children:["With the following configuration example, ",(0,l.jsx)(s.code,{children:"release-plz update"})," and ",(0,l.jsx)(s.code,{children:"release-plz release-pr"}),"\nwill set ",(0,l.jsx)(s.code,{children:"aaa"})," and ",(0,l.jsx)(s.code,{children:"bbb"})," to the same version\n(the highest of the next version of the ",(0,l.jsx)(s.code,{children:"aaa"})," and ",(0,l.jsx)(s.code,{children:"bbb"})," packages), while the other packages\nof the workspace are updated independently."]}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-toml",children:'[[package]]\nname = "aaa"\nversion_group = "group1"\n\n[[package]]\nname = "bbb"\nversion_group = "group1"\n'})}),"\n",(0,l.jsxs)(s.admonition,{type:"note",children:[(0,l.jsx)(s.p,{children:"The version group is considered only when packages contain changes."}),(0,l.jsx)(s.p,{children:(0,l.jsx)(s.strong,{children:"Example"})}),(0,l.jsxs)(s.p,{children:["Package ",(0,l.jsx)(s.code,{children:"aaa"})," (version ",(0,l.jsx)(s.code,{children:"0.1.0"}),") adds a non breaking change while ",(0,l.jsx)(s.code,{children:"bbb"})," (version ",(0,l.jsx)(s.code,{children:"0.2.0"}),")\nwasn't updated since last release.\nIn this case release-plz will only update ",(0,l.jsx)(s.code,{children:"aaa"})," to ",(0,l.jsx)(s.code,{children:"0.1.1"})," and ",(0,l.jsx)(s.code,{children:"bbb"})," will remain ",(0,l.jsx)(s.code,{children:"0.2.0"}),".\nHowever, if ",(0,l.jsx)(s.code,{children:"bbb"})," depends on ",(0,l.jsx)(s.code,{children:"aaa"}),", then ",(0,l.jsx)(s.code,{children:"bbb"})," is updated too and the version is set to ",(0,l.jsx)(s.code,{children:"0.2.1"}),"\nfor both packages."]})]}),"\n",(0,l.jsxs)(s.h3,{id:"the-changelog-section",children:["The ",(0,l.jsx)(s.code,{children:"[changelog]"})," section"]}),"\n",(0,l.jsxs)(s.p,{children:["Here's an example configuration, more customization examples available in the\n",(0,l.jsx)(s.a,{href:"/docs/changelog/examples",children:"Examples"})," section."]}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-toml",children:'[changelog]\nheader = "# Changelog"\nbody = "Body"\ntrim = true\nprotect_breaking_commits = true\nsort_commits = "newest"\n\ncommit_preprocessors = [\n  # remove issue numbers from commits\n  { pattern = \'\\((\\w+\\s)?#([0-9]+)\\)\', replace = "" },\n]\n\ncommit_parsers = [\n    { message = "^.*: add", group = "Added" },\n    { message = "^.*: support", group = "Added" },\n    { message = "^.*: remove", group = "Removed" },\n    { message = "^.*: delete", group = "Removed" },\n    { message = "^test", group = "Fixed" },\n    { message = "^fix", group = "Fixed" },\n    { message = "^.*: fix", group = "Fixed" },\n    { message = "^.*", group = "Changed" },\n]\n\npostprocessors = [\n    # Format the rendered changelog using `dprint`\n    { pattern = ".*", replace = "dprint fmt --stdin md" }\n]\n\nlink_parsers = [\n    { pattern = "RFC(\\\\d+)", text = "ietf-rfc$1", href = "https://datatracker.ietf.org/doc/html/rfc$1"}\n]\n'})}),"\n",(0,l.jsxs)(s.p,{children:["You can find the default configuration and some alternative templates in the\n",(0,l.jsx)(s.a,{href:"/docs/changelog/examples#release-plz-default",children:"changelog examples docs"}),"."]}),"\n",(0,l.jsxs)(s.h4,{id:"the-header-field",children:["The ",(0,l.jsx)(s.code,{children:"header"})," field"]}),"\n",(0,l.jsx)(s.p,{children:"Text at the beginning of the changelog."}),"\n",(0,l.jsx)(s.p,{children:"Default:"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-toml",children:'[changelog]\nheader = """# Changelog\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n## [Unreleased]\n\n"""\n'})}),"\n",(0,l.jsxs)(s.h4,{id:"the-body-field",children:["The ",(0,l.jsx)(s.code,{children:"body"})," field"]}),"\n",(0,l.jsxs)(s.p,{children:["Template that represents a single release in the changelog.\nIt contains the commit messages.\nLearn more about the template syntax in the changelog format ",(0,l.jsx)(s.a,{href:"/docs/changelog/format",children:"docs"}),"."]}),"\n",(0,l.jsx)(s.p,{children:"Default:"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-toml",children:'[changelog]\nbody = """\n## [{{ version }}]{%- if release_link -%}({{ release_link }}){% endif %} - {{ timestamp | date(format="%Y-%m-%d") }}\n{% for group, commits in commits | group_by(attribute="group") %}\n### {{ group | upper_first }}\n{% for commit in commits %}\n{%- if commit.scope -%}\n- *({{commit.scope}})* {% if commit.breaking %}[**breaking**] {% endif %}{{ commit.message }}{%- if commit.links %} ({% for link in commit.links %}[{{link.text}}]({{link.href}}) {% endfor -%}){% endif %}\n{% else -%}\n- {% if commit.breaking %}[**breaking**] {% endif %}{{ commit.message }}\n{% endif -%}\n{% endfor -%}\n{% endfor %}\n"""\n'})}),"\n",(0,l.jsxs)(s.h4,{id:"the-trim-field",children:["The ",(0,l.jsx)(s.code,{children:"trim"})," field"]}),"\n",(0,l.jsxs)(s.p,{children:["If set to ",(0,l.jsx)(s.code,{children:"true"}),", leading and trailing whitespace are removed from the ",(0,l.jsx)(s.a,{href:"#the-body-field",children:"body"}),"."]}),"\n",(0,l.jsx)(s.p,{children:"It is useful for adding indentation to the template for readability."}),"\n",(0,l.jsxs)(s.p,{children:["Default: ",(0,l.jsx)(s.code,{children:"true"}),"."]}),"\n",(0,l.jsxs)(s.h4,{id:"the-protect_breaking_commits-field",children:["The ",(0,l.jsx)(s.code,{children:"protect_breaking_commits"})," field"]}),"\n",(0,l.jsxs)(s.p,{children:["If ",(0,l.jsx)(s.code,{children:"true"}),", ",(0,l.jsx)(s.a,{href:"#the-commit_parsers-field",children:"commit_parsers"})," won't skip any commits with breaking\nchanges, regardless of the filter."]}),"\n",(0,l.jsxs)(s.p,{children:["Default: ",(0,l.jsx)(s.code,{children:"false"}),"."]}),"\n",(0,l.jsxs)(s.h4,{id:"the-tag_pattern-field",children:["The ",(0,l.jsx)(s.code,{children:"tag_pattern"})," field"]}),"\n",(0,l.jsx)(s.p,{children:"A regular expression for matching the git tags that release-plz should add to the changelog.\nIf a tag doesn't match the pattern, it won't be added to the changelog."}),"\n",(0,l.jsx)(s.p,{children:"By default, all tags are included."}),"\n",(0,l.jsx)(s.p,{children:"Example:"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-toml",children:'[changelog]\ntag_pattern = "v[0-9].*"\n'})}),"\n",(0,l.jsxs)(s.h4,{id:"the-sort_commits-field",children:["The ",(0,l.jsx)(s.code,{children:"sort_commits"})," field"]}),"\n",(0,l.jsx)(s.p,{children:"Sort the commits inside sections by specified order."}),"\n",(0,l.jsx)(s.p,{children:"Possible values:"}),"\n",(0,l.jsxs)(s.ul,{children:["\n",(0,l.jsx)(s.li,{children:(0,l.jsx)(s.code,{children:"oldest"})}),"\n",(0,l.jsx)(s.li,{children:(0,l.jsx)(s.code,{children:"newest"})}),"\n"]}),"\n",(0,l.jsxs)(s.h4,{id:"the-commit_preprocessors-field",children:["The ",(0,l.jsx)(s.code,{children:"commit_preprocessors"})," field"]}),"\n",(0,l.jsxs)(s.p,{children:["You can use commit preprocessors to manipulate the commit messages before parsing/grouping them.\nSpecify a regex ",(0,l.jsx)(s.code,{children:"pattern"})," to ",(0,l.jsx)(s.code,{children:"replace"})," parts of the commit message/body."]}),"\n",(0,l.jsx)(s.p,{children:"Here are some examples:"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-toml",children:'commit_preprocessors = [\n  # Replace `foo` with `bar`\n  { pattern = "foo", replace = "bar" },\n\n  # Replace `<REPO>` in the template body with the repository URL\n  { pattern = \'<REPO>\', replace = "https://github.com/me/my-proj" },\n\n  # Replace multiple spaces with a single space.\n  { pattern = "  +", replace = " "}\n\n  # Replace the issue number with the link. `\\\\(` is used to escape the `(` character.\n  # ${1} contains the issue number.\n  { pattern = "\\\\(#([0-9]+)\\\\)", replace = "([#${1}](https://github.com/me/my-proj/issues/${1}))"}\n\n  # Replace the issue link with the number.\n  { pattern = "https://github.com/[^ ]/issues/([0-9]+)", replace = "[Issue #${1}]"}\n\n  # Remove prefix\n  { pattern = \'Merged PR #[0-9]: (.*)\', replace = "$1"}\n\n  # Remove gitmoji from commit messages, both actual UTF emoji and :emoji:\n  { pattern = \' *(:\\w+:|[\\p{Emoji_Presentation}\\p{Extended_Pictographic}\\u{200D}]) *\', replace = "" },\n\n  # Hyperlink PR references from merge commits.\n  { pattern = "Merge pull request #([0-9]+) from [^ ]+", replace = "PR # [${1}](https://github.com/me/my-proj/pull/${1}):"}\n\n  # Hyperlink commit links, with short commit hash as description.\n  { pattern = "https://github.com/orhun/git-cliff/commit/([a-f0-9]{7})[a-f0-9]*", replace = "commit # [${1}](${0})"}\n\n  # Hyperlink bare commit hashes like "abcd1234" in commit logs, with short commit hash as description.\n  { pattern = "([ \\\\n])(([a-f0-9]{7})[a-f0-9]*)", replace = "${1}commit # [${3}](https://github.com/me/my-proj/commit/${2})"}\n]\n'})}),"\n",(0,l.jsxs)(s.p,{children:["The default is the following, where the PR URL is set based on your ",(0,l.jsx)(s.code,{children:"repo_url"}),":"]}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-toml",children:'commit_preprocessors = [\n  # Replace the issue/PR number with the link.\n  { pattern = "\\\\(#([0-9]+)\\\\)", replace = "([#${1}](https://github.com/me/my-proj/pull/${1}))"}\n]\n'})}),"\n",(0,l.jsx)(s.h5,{id:"using-external-commands",children:"Using external commands"}),"\n",(0,l.jsx)(s.p,{children:"Custom OS commands can also be used to edit the commit messages."}),"\n",(0,l.jsxs)(s.p,{children:["For example, here's how you can use ",(0,l.jsx)(s.a,{href:"https://pandoc.org/",children:"pandoc"})," to convert all commit messages\nto the ",(0,l.jsx)(s.a,{href:"https://commonmark.org/",children:"CommonMark"})," format:"]}),"\n",(0,l.jsxs)(s.ul,{children:["\n",(0,l.jsx)(s.li,{children:(0,l.jsx)(s.code,{children:'{ pattern = ".*", replace_command = "pandoc -t commonmark"}'})}),"\n"]}),"\n",(0,l.jsxs)(s.p,{children:["The ",(0,l.jsx)(s.code,{children:"$COMMIT_SHA"})," environment variable is set when executing the command.\nFor example, you can read the commit itself:"]}),"\n",(0,l.jsxs)(s.ul,{children:["\n",(0,l.jsx)(s.li,{children:(0,l.jsx)(s.code,{children:"{ pattern = '.*', replace_command = 'git show -s --format=%B $COMMIT_SHA' }"})}),"\n"]}),"\n",(0,l.jsxs)(s.h4,{id:"the-postprocessors-field",children:["The ",(0,l.jsx)(s.code,{children:"postprocessors"})," field"]}),"\n",(0,l.jsx)(s.p,{children:"An array of postprocessors for manipulating the rendered changelog. It can be used, for example, to\nenforce to run a formatter."}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-toml",children:'postprocessors = [\n    # Format the rendered changelog using `dprint`\n    { pattern = ".*", replace = "dprint fmt --stdin md" }\n]\n'})}),"\n",(0,l.jsx)(s.p,{children:"Postprocessors use the same syntax as commit preprocessors, so check the section above for examples."}),"\n",(0,l.jsxs)(s.h4,{id:"the-commit_parsers-field",children:["The ",(0,l.jsx)(s.code,{children:"commit_parsers"})," field"]}),"\n",(0,l.jsx)(s.p,{children:"An array of parsers allowing to group and skip commits."}),"\n",(0,l.jsx)(s.p,{children:"Default:"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-toml",children:'commit_parsers = [\n    { message = "^feat", group = "added" },\n    { message = "^changed", group = "changed" },\n    { message = "^deprecated", group = "deprecated" },\n    { message = "^fix", group = "fixed" },\n    { message = "^security", group = "security" },\n    { message = "^.*", group = "other" },\n]\n'})}),"\n",(0,l.jsxs)(s.p,{children:["With the default configuration, a commit starting with ",(0,l.jsx)(s.code,{children:"feat"}),' will be grouped under\n"Added" section in the changelog (e.g. ',(0,l.jsx)(s.code,{children:"### Added"}),")."]}),"\n",(0,l.jsxs)(s.p,{children:["By default, groups are showed in alphabetical order in the changelog.\nTo customize the order, see\n",(0,l.jsx)(s.a,{href:"/docs/changelog/tips-and-tricks#changing-the-group-order",children:"changing the group order"}),"."]}),"\n",(0,l.jsx)(s.p,{children:"Here are some examples of parsers:"}),"\n",(0,l.jsxs)(s.ul,{children:["\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.code,{children:'{ body = ".*security", group = "Security" }'}),"\n",(0,l.jsxs)(s.ul,{children:["\n",(0,l.jsxs)(s.li,{children:['Group the commit as "Security" if the commit body contains ',(0,l.jsx)(s.code,{children:"security"}),"."]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.code,{children:'{ footer = "^changelog: ?ignore", skip = true }'}),"\n",(0,l.jsxs)(s.ul,{children:["\n",(0,l.jsxs)(s.li,{children:["Skip processing the commit if the commit footer contains ",(0,l.jsx)(s.code,{children:"changelog: ignore"}),"."]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.code,{children:"{ message = '^fix\\((.*)\\)', group = 'Fix (${1})' }"}),"\n",(0,l.jsxs)(s.ul,{children:["\n",(0,l.jsx)(s.li,{children:"Use the matched scope value from the commit message in the group name."}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.code,{children:'{ message = "^refactor\\\\(clippy\\\\)", skip = true }'}),"\n",(0,l.jsxs)(s.ul,{children:["\n",(0,l.jsxs)(s.li,{children:["Skip commits starting with the message ",(0,l.jsx)(s.code,{children:"refactor(clippy)"}),"."]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.code,{children:'{ body = "$^", skip = true }'}),"\n",(0,l.jsxs)(s.ul,{children:["\n",(0,l.jsx)(s.li,{children:"Skip commits with an empty body."}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.code,{children:'{ message = "^doc", group = "Documentation", default_scope = "other" }'}),"\n",(0,l.jsxs)(s.ul,{children:["\n",(0,l.jsxs)(s.li,{children:['If the commit starts with "doc", group the commit as "Documentation" and set the\ndefault scope to "other".\nE.g. ',(0,l.jsx)(s.code,{children:"docs: xyz"})," will be processed as ",(0,l.jsx)(s.code,{children:"docs(other): xyz"}),"."]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.code,{children:'{ sha = "f6f2472bdf0bbb5f9fcaf2d72c1fa9f98f772bb2", skip = true }'}),"\n",(0,l.jsxs)(s.ul,{children:["\n",(0,l.jsx)(s.li,{children:"Skip a specific commit by using its SHA1."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(s.h4,{id:"the-link_parsers-field",children:["The ",(0,l.jsx)(s.code,{children:"link_parsers"})," field"]}),"\n",(0,l.jsx)(s.p,{children:"An array of link parsers for extracting external references, and turning them into URLs, using regex."}),"\n",(0,l.jsx)(s.p,{children:"Examples:"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-toml",children:'link_parsers = [\n    # Extract all GitLab issues and PRs and generate URLs linking to them.\n    # The link text will be the matching pattern.\n    { pattern = "#(\\\\d+)", href = "https://github.com/me/my-proj/issues/$1"}\n    # Extract mentions of IETF RFCs and generate URLs linking to them.\n    # It also rewrites the text as "ietf-rfc...".\n    { pattern = "RFC(\\\\d+)", text = "ietf-rfc$1", href = "https://datatracker.ietf.org/doc/html/rfc$1"}\n]\n'})}),"\n",(0,l.jsxs)(s.p,{children:["The extracted links can be used in the ",(0,l.jsx)(s.a,{href:"#the-body-field",children:"body"})," with the ",(0,l.jsx)(s.code,{children:"commits.links"})," variable."]})]})}function o(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,l.jsx)(s,{...e,children:(0,l.jsx)(h,{...e})}):h(e)}},8453:(e,s,i)=>{i.d(s,{R:()=>c,x:()=>a});var n=i(6540);const l={},r=n.createContext(l);function c(e){const s=n.useContext(r);return n.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:c(e.components),n.createElement(r.Provider,{value:s},e.children)}}}]);